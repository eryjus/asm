;;===================================================================================================================
;; 16bcfs.arch: Assembler architecture definition for the 16-Bit Computer From Scratch
;;
;;  .organization -- this is the fundamental size of the instruction set and the underlying architecture.  It
;;  identifies the lowest level of operation which can take place.
;;
;;  .little-endian
;;  .big-endian -- larger than the `.organization` size, what endianness are the structures organized.
;;
;;  .cond-bits -- the number of bits used to specify any conditional execution.  When no `.cond-xxx` option is
;;  specified, conditional execution is not supported.  Every instruction will have these bits prepended to the
;;  bit image for the instruction.  Note that this is a limitation of this assembler: the condition bits are
;;  in the high-order bits.
;;
;;  .cond-default -- specifies the condition which is used when no condition is offered for the instruction, as in
;;  the condition bits for execute always.
;;
;;  .cond-prefix -- the characters which are prefixed onto an instruction in order to optionally condition it,
;;  followed by the bits which are used to specify the condition.
;;
;;  .cond-suffix -- the characters which are appended to an instruction in order to optionally condition it,
;;  followed by the bits which are used to specify the condition.
;;
;;  .register -- defines a register and its size in bits.
;;
;;  ----------------------------------------------------------------------------------------------------------------
;;
;;      Date     Tracker  Version  Description
;;  -----------  -------  -------  ---------------------------------------------------------------------------------
;;  2023-Feb-03  Initial  v0.0.1   Initial Version
;;  2023-Jun-26  Initial  v0.0.7   Reorganize the instruction set before it get out of control
;;===================================================================================================================


;;
;; -- Some global definitions about the overall architecture
;;    ------------------------------------------------------
.organization   16bits
.little-endian  ;; note the 16bit organization is "big endian bit order", just like a single byte would be


;;
;; -- These are the conditions that can be added to an instruction for conditional execution
;;    --------------------------------------------------------------------------------------
.cond-bits      4
.cond-default   0x0
.cond-suffix    -al     0x0
.cond-suffix    -nv     0x1
.cond-suffix    -eq     0x2
.cond-suffix    -ne     0x3
.cond-suffix    -cs     0x4
.cond-suffix    -cc     0x5
.cond-suffix    -mi     0x6
.cond-suffix    -pl     0x7
.cond-suffix    -vs     0x8
.cond-suffix    -vc     0x9
.cond-suffix    -hi     0xa
.cond-suffix    -ls     0xb
.cond-suffix    -ge     0xc
.cond-suffix    -lt     0xd
.cond-suffix    -gt     0xe
.cond-suffix    -le     0xf


;;
;; -- Define the registers for this arch
;;    ----------------------------------
;.register       rz      16          ; The "Zero" register (read-only value of 0)
.register       r1      16          ; R1 Register
.register       r2      16          ; R2 Register


;;
;; -- Memory organization and output
;;    ------------------------------
.memory         0x0000  0x7fff  ROM
.memory         0x8000  0xffff  RAM


;;
;; -- TODO: Tell the assembler how to write the target output
;;    -------------------------------------------------------
;.output         "eeprom-msb.bin"    ROM[15:8]
;.output         "eeprom-lsb.bin"    ROM[7:0]



;;
;; == The opodes recognized by this assembler
;;    =======================================
.opcode         nop                     .mc  000                ;; -- this is the only instruction which is hard wired
.opcode         mov     r1,$(16)        .mc  001 %
.opcode         mov     r2,$(16)        .mc  002 %
;.opcode         mov     r3,$(16)        .mc  003 %
;.opcode         mov     r4,$(16)        .mc  004 %
;.opcode         mov     r5,$(16)        .mc  005 %
;.opcode         mov     r6,$(16)        .mc  006 %
;.opcode         mov     r7,$(16)        .mc  007 %
;.opcode         mov     r8,$(16)        .mc  008 %
;.opcode         mov     r9,$(16)        .mc  009 %
;.opcode         mov     r10,$(16)       .mc  00a %
;.opcode         mov     r11,$(16)       .mc  00b %
;.opcode         mov     r12,$(16)       .mc  00c %
;.opcode         mov     sp,$(16)        .mc  00d %
.opcode          clc                    .mc  00e
.opcode          stc                    .mc  00f

;;
;; ==================================================================
;;

;.opcode                                 .mc  010
;.opcode         mov     r1,rz           .mc  011
;.opcode         mov     r2,rz           .mc  012
;.opcode         mov     r3,rz           .mc  013
;.opcode         mov     r4,rz           .mc  014
;.opcode         mov     r5,rz           .mc  015
;.opcode         mov     r6,rz           .mc  016
;.opcode         mov     r7,rz           .mc  017
;.opcode         mov     r8,rz           .mc  018
;.opcode         mov     r9,rz           .mc  019
;.opcode         mov     r10,rz          .mc  01a
;.opcode         mov     r11,rz          .mc  01b
;.opcode         mov     r12,rz          .mc  01c
;.opcode         mov     sp,rz           .mc  01d
;.opcode                                 .mc  01e
;.opcode                                 .mc  01f

;;
;; ==================================================================
;;

;.opcode                                 .mc  020
;.opcode                                 .mc  021
.opcode         mov     r2,r1           .mc  022
;.opcode         mov     r3,r1           .mc  023
;.opcode         mov     r4,r1           .mc  024
;.opcode         mov     r5,r1           .mc  025
;.opcode         mov     r6,r1           .mc  026
;.opcode         mov     r7,r1           .mc  027
;.opcode         mov     r8,r1           .mc  028
;.opcode         mov     r9,r1           .mc  029
;.opcode         mov     r10,r1          .mc  02a
;.opcode         mov     r11,r1          .mc  02b
;.opcode         mov     r12,r1          .mc  02c
;.opcode                                 .mc  02d
;.opcode                                 .mc  02e
;.opcode                                 .mc  02f

;;
;; ==================================================================
;;

;.opcode                                 .mc  030
.opcode         mov     r1,r2           .mc  031
;.opcode                                 .mc  032
;.opcode         mov     r3,r2           .mc  033
;.opcode         mov     r4,r2           .mc  034
;.opcode         mov     r5,r2           .mc  035
;.opcode         mov     r6,r2           .mc  036
;.opcode         mov     r7,r2           .mc  037
;.opcode         mov     r8,r2           .mc  038
;.opcode         mov     r9,r2           .mc  039
;.opcode         mov     r10,r2          .mc  03a
;.opcode         mov     r11,r2          .mc  03b
;.opcode         mov     r12,r2          .mc  03c
;.opcode                                 .mc  03d
;.opcode                                 .mc  03e
;.opcode                                 .mc  03f

;;
;; ==================================================================
;;

.opcode         jmp     $(16)           .mc 0f0 %
.opcode         jmp     r1              .mc 0f1
.opcode         jmp     r2              .mc 0f2
;.opcode         jmp     r3              .mc 0f3
;.opcode         jmp     r4              .mc 0f4
;.opcode         jmp     r5              .mc 0f5
;.opcode         jmp     r6              .mc 0f6
;.opcode         jmp     r7              .mc 0f7
;.opcode         jmp     r8              .mc 0f8
;.opcode         jmp     r9              .mc 0f9
;.opcode         jmp     r10             .mc 0fa
;.opcode         jmp     r11             .mc 0fb
;.opcode         jmp     r12             .mc 0fc
;.opcode         jmp     ra              .mc 0fd
;.opcode                                 .mc  0fe
;.opcode                                 .mc  0ff

;;
;; ==================================================================
;;


;;
;; -- Some temporary opcodes or opcodes needing a new home
;;    ----------------------------------------------------
.opcode         decr    r1              .mc ff0
.opcode         incr    r1              .mc ff1
.opcode         decr    r2              .mc ff2
.opcode         incr    r2              .mc ff3

