;;===================================================================================================================
;; 16bcfs.arch: Assembler architecture definition for the 16-Bit Computer From Scratch
;;
;;      Date     Tracker  Version  Description
;;  -----------  -------  -------  ---------------------------------------------------------------------------------
;;  2023-Feb-03  Initial  v0.0.1   Initial Version
;;===================================================================================================================


;;
;; -- Some global definitions about the overall architecture
;;    ------------------------------------------------------
.organization   16bits
.little-endian  ;; note the 16bit organization is "big endian bit order", just like a single byte would be


;;
;; -- Define the registers for this arch
;;    ----------------------------------
.register       r1      16          ; R1 Register


;;
;; -- Memory organization and output
;;    ------------------------------
.memory         0x0000  0x7fff  ROM
.memory         0x8000  0xffff  RAM


;;
;; -- TODO: Tell the assembler how to write the target output
;;    -------------------------------------------------------
;;.output         "eeprom-msb.bin"    ROM[15:8]
;;.output         "eeprom-lsb.bin"    ROM[7:0]



;;
;; == The opodes recognized by this assembler
;;    =======================================


;;
;; -- NOP
;;    ---
.opcode         nop                 .mc  0000
.opcode         nop-al              .mc  0000
.opcode         nop-nv              .mc  1000
.opcode         nop-eq              .mc  2000
.opcode         nop-ne              .mc  3000
.opcode         nop-cs              .mc  4000
.opcode         nop-cc              .mc  5000
.opcode         nop-mi              .mc  6000
.opcode         nop-pl              .mc  7000
.opcode         nop-vs              .mc  8000
.opcode         nop-vc              .mc  9000
.opcode         nop-hi              .mc  a000
.opcode         nop-ls              .mc  b000
.opcode         nop-ge              .mc  c000
.opcode         nop-lt              .mc  d000
.opcode         nop-gt              .mc  e000
.opcode         nop-le              .mc  f000


;;
;; -- MOV R1,<immed-16>
;;    -----------------
.opcode         mov    r1,$(16)     .mc 0013 %
.opcode         mov-al r1,$(16)     .mc 0013 %
.opcode         mov-nv r1,$(16)     .mc 1013 %
.opcode         mov-eq r1,$(16)     .mc 2013 %
.opcode         mov-ne r1,$(16)     .mc 3013 %
.opcode         mov-cs r1,$(16)     .mc 4013 %
.opcode         mov-cc r1,$(16)     .mc 5013 %
.opcode         mov-mi r1,$(16)     .mc 6013 %
.opcode         mov-pl r1,$(16)     .mc 7013 %
.opcode         mov-vs r1,$(16)     .mc 8013 %
.opcode         mov-vc r1,$(16)     .mc 9013 %
.opcode         mov-hi r1,$(16)     .mc a013 %
.opcode         mov-ls r1,$(16)     .mc b013 %
.opcode         mov-ge r1,$(16)     .mc c013 %
.opcode         mov-lt r1,$(16)     .mc d013 %
.opcode         mov-gt r1,$(16)     .mc e013 %
.opcode         mov-le r1,$(16)     .mc f013 %




;;
;; -- JMP <immed-16>
;;    --------------
.opcode         jmp    $(16)     .mc 0ff3 %
.opcode         jmp-al $(16)     .mc 0ff3 %
.opcode         jmp-nv $(16)     .mc 1ff3 %
.opcode         jmp-eq $(16)     .mc 2ff3 %
.opcode         jmp-ne $(16)     .mc 3ff3 %
.opcode         jmp-cs $(16)     .mc 4ff3 %
.opcode         jmp-cc $(16)     .mc 5ff3 %
.opcode         jmp-mi $(16)     .mc 6ff3 %
.opcode         jmp-pl $(16)     .mc 7ff3 %
.opcode         jmp-vs $(16)     .mc 8ff3 %
.opcode         jmp-vc $(16)     .mc 9ff3 %
.opcode         jmp-hi $(16)     .mc aff3 %
.opcode         jmp-ls $(16)     .mc bff3 %
.opcode         jmp-ge $(16)     .mc cff3 %
.opcode         jmp-lt $(16)     .mc dff3 %
.opcode         jmp-gt $(16)     .mc eff3 %
.opcode         jmp-le $(16)     .mc fff3 %
